// BRUTE FORCE 
// recursion-> check for all intervals, if want to keep it or not
// TC=O(2^n)
// SC=O(n)
// class Solution {
// public:
//     int eraseOverlapIntervals(vector<vector<int>>& intervals) {
//         std::sort(intervals.begin(), intervals.end(), [](const std::vector<int>& a, const std::vector<int>& b) {
//             return a[1] < b[1];
//         });

//         return intervals.size() - maxNonOverlappingIntervals(intervals, 0, std::numeric_limits<int>::min());
//     }

//     int maxNonOverlappingIntervals(const std::vector<std::vector<int>>& intervals, int index, int lastEnd) {
//         // Base case: if all intervals are processed
//         if (index == intervals.size()) {
//             return 0;
//         }

//         // Case 1: Exclude the current interval if it overlaps with the previous one
//         int exclude = 0;
//         if (intervals[index][0] < lastEnd) {
//             exclude = maxNonOverlappingIntervals(intervals, index + 1, lastEnd);
//         }

//         // Case 2: Include the current interval if it doesn't overlap with the previous one
//         int include = 0;
//         if (intervals[index][0] >= lastEnd) {
//             include = 1 + maxNonOverlappingIntervals(intervals, index + 1, intervals[index][1]);
//         }

//         // Return the maximum of two cases
//         return std::max(exclude, include);
//     }
// };


// Better solution
// TC=O(n^2)
// SC=O(n^2)

// class Solution {
// private:
//     unordered_map<string, int> memo;

//     int maxNonOverlappingIntervals(const vector<vector<int>>& intervals, int index, int lastEnd) {
//         // Base case: if all intervals are processed
//         if (index == intervals.size()) {
//             return 0;
//         }

//         // Check if the current subproblem is already computed
//         string key = to_string(index) + "," + to_string(lastEnd);
//         if (memo.count(key)) {
//             return memo[key];
//         }

//         // Case 1: Exclude the current interval if it overlaps with the previous one
//         int exclude = 0;
//         if (intervals[index][0] < lastEnd) {
//             exclude = maxNonOverlappingIntervals(intervals, index + 1, lastEnd);
//         }

//         // Case 2: Include the current interval if it doesn't overlap with the previous one
//         int include = 0;
//         if (intervals[index][0] >= lastEnd) {
//             include = 1 + maxNonOverlappingIntervals(intervals, index + 1, intervals[index][1]);
//         }

//         // Store the result in the memo and return the maximum of two cases
//         int result = max(exclude, include);
//         memo[key] = result;
//         return result;
//     }

// public:
//     int eraseOverlapIntervals(vector<vector<int>>& intervals) {
//         // Sort intervals based on end values
//         sort(intervals.begin(), intervals.end(), [](const vector<int>& a, const vector<int>& b) {
//             return a[1] < b[1];
//         });

//         // Clear the memo
//         memo.clear();

//         // Call the memoized function
//         return intervals.size() - maxNonOverlappingIntervals(intervals, 0, numeric_limits<int>::min());
//     }
// };


// Dynamic Programming
// TC=O(n^2)
// SC=O(n)
// class Solution {
// public:
//     int eraseOverlapIntervals(vector<vector<int>>& intervals) {
//         int n = intervals.size();
//         if (n == 0) {
//             return 0;
//         }

//         // Sort intervals based on start values
//         sort(intervals.begin(), intervals.end());

//         // dp[i] stores the maximum number of non-overlapping intervals up to the i-th interval
//         vector<int> dp(n, 1);

//         // Initialize the maximum non-overlapping intervals with the first interval
//         int maxNonOverlapping = 1;

//         for (int i = 1; i < n; i++) {
//             // Find the last non-overlapping interval before the i-th interval
//             int lastNonOverlap = -1;
//             for (int j = i - 1; j >= 0; j--) {
//                 if (intervals[j][1] <= intervals[i][0]) {
//                     lastNonOverlap = j;
//                     break;
//                 }
//             }

//             // dp[i] = 1 + max(dp[lastNonOverlap], dp[i-1])
//             dp[i] = 1 + (lastNonOverlap >= 0 ? dp[lastNonOverlap] : 0);
//             maxNonOverlapping = max(maxNonOverlapping, dp[i]);
//         }

//         return n - maxNonOverlapping;
//     }
// };

//BEST approach
//TC=O(nlogn)
//SC=O(1)
bool comp(vector<int> &a,vector<int> &b) {
	return a[1]<b[1];
}
class Solution {
public:
    int eraseOverlapIntervals(vector<vector<int>>& intervals) {
        if(intervals.size()==0)
        {
            return 0;
        }
        sort(intervals.begin(),intervals.end(),comp);
        int ans=-1;
        vector<int> prev= intervals[0];

		for(vector<int> i: intervals) {
            if(prev[1]>i[0]) {
				ans++;                //we dont update previous, because i[1] will be grater then prev[1]
			}else prev=i;           // we want the end point to be minimum
        }
		return ans;    
    }
};
char speedUp = []{ios::sync_with_stdio(0);cin.tie(0);cout.tie(0);return 'c';}();